[
    
    
    
        
            {
                "id": 0,
                "href": "https://7riatsu.com/about/",
                "title": "About me",
                "section": "page",
                "date" : "0001.01.01",
                "body": "I\u0026rsquo;m Atsuki Narita, a software engineer with a strong focus on server-side development.\nExperience DeNA Co., Ltd. [Apr 2021 – Current]  Built and maintained an application with over 4M downloads, requiring communication with cross-functional teams regarding product and customer success. Focused on server-side development, providing mentoring and coaching to newcomers. Improved server performance by redesigning large tables and tuning database queries. Paid close attention to customer inquiries to identify and resolve high-risk issues.  LABOT, Inc. [Oct 2019 – Jul 2020]  Developed \u0026ldquo;SHAKYO.io\u0026rdquo;, a learning service for beginners in programming as a product manager and software engineer using Ruby on Rails and React. Collaborated with a global team in English. Introduced a subscription payment feature using the Omise payment API service.  ANNONE, Inc. [Sep 2019 – Mar 2020]  Developed products in the cosmetology domain using Go, Ruby on Rails, React, and Flutter. Built a clean architecture RESTful API server. Gained experience in brief Scrum development cycles during the 0 to 1 phase.  FLUX, Inc. [Nov 2018 – Nov 2019]  Mainly responsible for back-end API (Node.js), data collection (Python), and management of the development team. As a tech lead and product manager, developed products that were introduced to many partner companies and generated most of the company\u0026rsquo;s profits. Provided mentoring and coaching for two internship members.  Mercari, Inc. [Aug 2018 – Sep 2018]  Joined as a product manager intern during the launch of a new travel business at Mercari (Product: mertrip). Developed product specifications based on usability tests and conducted competitive analysis of domestic and foreign companies.  Education Tokyo Metropolitan University [Apr 2016 - Mar 2021]  Bachelor of Engineering - BE Intelligent Mechanical Systems Received the Excellent Presentation Award at the 28th Student Member Graduation Research Presentation of the Japan Society for Precision Engineering in 2021. Award announcement page  "
            }
    
        ,
            {
                "id": 1,
                "href": "https://7riatsu.com/post/mysql-indexing-mechanism/",
                "title": "MySQL のインデックスの仕組み調べてみた",
                "section": "post",
                "date" : "2021.12.17",
                "body": "こんにちは @7riatsu です。\n今回は、サーバーの開発をする上で必須知識と言っても過言ではないデータベースのインデックスについて調べてみました。\nこの記事を読むことで次の項目を理解できます。\n インデックスとは何か 大規模なサービス開発をする上で、インデックスを適切に使うことの重要性 SQL が実行され、データアクセスするまでの流れ MySQL がどのようにインデックスを用いるか調べる方法 遅いクエリを生み出さないために押さえるべきポイント  なお、本記事は DeNA 21新卒×22新卒内定者 Advent Calendar 2021 の17日目の投稿です。\n前提 今回、インデックスについて調べるにあたって議論の対象とするデータベースを MySQL としています。 データベースによって違いがある部分もあるため、その点ご留意ください。\nインデックスとは インデックスとは、特定のカラム値のある行をすばやく見つけるために使用するデータ構造のことです。\n インデックスが張られている場合: テーブルのシークする箇所を絞ることが可能 インデックスが張られていない場合: テーブルの全てのレコードを参照する必要がある  MySQL ではほとんどのインデックスのデータ構造に B-tree というデータ構造が採用されています。B-tree はデータベースのインデックスに一般的に利用されるツリー型のデータ構造のことです。（B-tree の詳しい説明は今回触れません。） ※例外として MEMORY テーブルはハッシュインデックスもサポートしています。\n現実世界におけるインデックスの例として「辞書」を考えてみます。辞書は通常、アルファベット順や五十音順にソートされ、末尾の索引（インデックス）にはどのページにどの単語が書かれているか記載してあります。探したい単語を最初のページから1ページずつ順番に探すよりも、末尾の索引を参照しどのページに探している単語が書かれているかを把握した上で探した方が早く情報に辿り着けることは明らかです。\nデータベースも現実世界と類似の挙動をします。インデックスがある場合は、インデックスファイルからデータファイルのどのあたりを参照したら良いかを絞れるため、高速な処理を実現できます。 逆に、インデックスがない場合は、データファイルのどのあたりを参照したら良いか絞れないため、テーブル全体をシークする必要があります。これはフルテーブルスキャンといい、最も時間のかかる処理です。\nインデックスの重要性 サービスの規模が大きくなればなるほど、テーブルのレコード数は多くなり、インデックスを適切に使うことの重要性は増します。\n例えばテーブルのレコード数が100行しかないサービスでは、フルテーブルスキャンをしたところでかかる処理時間はたかが知れています。むしろインデックスを利用するよりもテーブル全体をシークした場合の方がかかる時間が少ないことすらあります。\nしかし、テーブルのレコード数がXX万~YY億行もあるサービスでは、フルテーブルスキャンをしてしまうと1クエリあたりにかかる計算資源（CPU やメモリなど）と処理時間が膨大となります。 そのような重たいクエリが短時間にたくさん発行されるとデータベースの負荷が高まり、データベース起因の障害発生の可能性が高まります。\n大規模なサービスの開発・運用をする際は、インデックスを適切に利用することがより高水準で求められます。\nSQL がデータアクセスするまでの流れとインデックスの仕組み SQL がデータアクセスするまでの流れ 次に、SQL が実行され、データアクセスするまでの流れについてお伝えします。\n  「パーサ」が構文解析を行いクエリを処理しやすい形に変換 「オプティマイザ」が「①選択可能な実行計画を複数作成し」「②各実行計画のコストを計算」する 「カタログマネージャー」がオプティマイザに統計情報を提供 「プラン評価」最適な実行計画を選択  1~4 について、それぞれもう少し深掘りして解説します。\n1. パーサ パーサでは SQL を構文解析し、MySQL が処理しやすい形に処理をします。この段階では、二つの役割を果たします。\nまず一つ目は、入力された SQL が構文的に正しいか検証する役割です。構文的に誤った入力がされた場合、この段階で処理を打ち切ります。\n次に二つ目は、入力された SQL を定型的な形に変換する役割です。これにより、効率的に以降の処理を MySQL が行えます。\n2. オプティマイザ オプティマイザでは最適なデータアクセスの方法を決定する役割を担います。オプティマイザは\n ①インデックスの有無やテーブルの統計情報などをもとに、選択可能な実行計画を複数作成し ②各実行計画のコストを計算  します。実行計画とは、使用するインデックスやテーブルの結合順序など、クエリを実行しデータアクセスする際の方法のことです。\nオプティマイザがどのようにインデックスを使用してクエリを実行するか決定するため、とても重要な役割と言えます。\n3. カタログマネージャ カタログマネージャはオプティマイザが実行計画を立てるために必要な統計情報を提供します。\n 統計情報の例  インデックス情報 レコード数 テーブルカラム内のNULLの数 カーディナリティ（テーブルカラム内の異なる値の数）    4. プラン評価 プラン評価はオプティマイザの立てた複数の実行計画から、最適な実行計画を選択します。\nMySQL がどのようにインデックスを用いるか調べる方法 ここまでの内容で、SQL が実行された際に MySQL がどのようインデックスを決定してデータアクセスするかを説明しました。 ここからは、具体的に MySQL がどのようにインデックスを決定するか調べる方法について説明していきます。\nEXPLAIN EXPLAIN とは MySQL がクエリをどのように実行するかを調べるためのステートメントです。 MySQL 5.6.3 以降は SELECT, UPDATE, DELETE, INSERT, REPLACE ステートメントにおいて EXPLAIN を実行できます。\nこれらのステートメントにおいて EXPLAIN を先頭につけて実行すると、MySQL はオプティマイザからの実行計画に関する情報を表示します。 開発をするときに実行されるクエリを EXPLAIN してみて、インデックスが適切に用いられるクエリになっているかを確認するようにしましょう。\n例えば、users テーブルに対して created_at が 2021年12月1日 以降に作成されたデータを取得するクエリを投げる場合に使われるインデックスを調べたい場合は、以下のように SELECT ステートメントの前に EXPLAIN を追加して実行します。\nEXPLAIN SELECT * FROM users WHERE created_at \u0026gt;= \u0026#39;2021-12-01T00:00:00+09:00\u0026#39;; 前提として、オプティマイザは統計情報を用いて実行計画を立てるので、本番環境または本番環境と同様のデータが入っている環境で EXPLAIN する必要があります。 そうしなければ、本番環境でクエリが実行される際に想定と異なる挙動をすることがあります。\n実際に自分が遭遇した現象として、少ないデータ数しかない開発環境上で EXPLAIN をしたところ、インデックスが想定通りの挙動をせず、適切に使われていませんでした。 これは、データ数が少なすぎると、インデックスを用いずにクエリを実行した方が実行効率が良く、EXPLAIN にもインデックスを用いない実行計画の情報が表示されることがあるためです。 本番環境上で同様のクエリに対して EXPLAIN をしたところ、想定通りのインデックスが用いられていることを確認できました。\n正しい結果を得るために、本番環境または本番環境と同様のデータが入っている環境で EXPLAIN するようにしましょう。\nEXPLAIN の見方 EXPLAIN をした際に表示される項目は以下の通りです。（出典: MySQL 8.0 リファレンスマニュアル）\n   カラム 説明     id SELECT 識別子   select_type SELECT の種類   table 出力行のテーブル   partitions 一致するパーティション   type 結合型   possible_keys 選択可能なインデックス   key 実際に選択されたインデックス   key_len 選択されたキーの長さ   ref インデックスと比較されるカラム   rows 調査される行の見積もり   filtered テーブル条件によってフィルタ処理される行の割合   Extra 追加情報    一つ一つの項目については今回触れないので、気になる方は出典元の 「MySQL 8.0 リファレンスマニュアル」 を参照してください。\nこの中で普段開発する時に見ると良さそうなところをピックアップします。\ntype テーブルの結合方法を示します。\n最も適切なものから不適切なものにかけて代表例を説明していきます。\n   種類 説明     const 一致するレコードが一行のみ。非常に高速。   eq_ref 結合時にインデックスの全てのパートが使用されており、かつインデックスは PRIMARY KEY または UNIQUE NOT NULL の場合。const の次の高速。   ref ユニークではないインデックスを用いて等価検索(WHERE)を行った場合。   range インデックスを用いて範囲検索(WHERE BETWEEN AND)した場合。   index インデックス全体をスキャンする場合。フルインデックススキャン。かなり遅い。   ALL テーブル全体をスキャンする場合。フルテーブルスキャン。最も遅い。    const, eq_ref, ref, range あたりが出ていれば大丈夫そうです。逆に index, ALL が表示されている場合はクエリを見直すかテーブル設計を見直す必要がありそうです。\npossible_keys このテーブル内の行検索に使用可能なインデックスを示します。NULL が表示されている場合、関連するインデックスがないことを示します。\nkey MySQL が実際に使用を決定したインデックスを示します。基本的に possible_keys のいずれかから選択される形となります。 ここに自分が意図した通りのインデックスが表示されていることを確認できれば大丈夫です。\nkey_len MySQL が使用を決定したキーの長さ（バイト数）を示します。複合インデックスを利用している場合、ここを見ることで、どの部分までインデックスを用いるか確認できます。\n例えば、id(BIGINT), user_id(BIGINT) の複合インデックスを用いたい場合は BIGINT のバイト数が 8 であることから、key_len が 16 になっていることを確認できれば大丈夫です。ここが 8 になっている場合は最初の id しか利用されず、user_id が利用されていない可能性があるので注意が必要です。\nデータサイズに関しては「MySQL 8.0 リファレンスマニュアル」を参照することで調べられます。\nrows MySQL がクエリを実行するために調査する必要があると考える行数です。ここが大きければ大きいほど時間がかかってしまうので適切な行数になっているかどうか確認しましょう。\nExtra MySQL がクエリを解決する方法に関する追加情報を示します。表示される可能性のある表示項目の代表例を説明していきます。\n   表示項目 説明     Using where WHERE ステートメントに検索条件が指定されている場合に表示される。   Using index クエリがインデックスツリーの情報のみを使用して、テーブルからカラム情報が取得される。   Using filesort これが表示されると MySQL はソート順で行を取得する方法を見つけるために、インデックスを使用してクエリを解決できない。そのため、非常に時間がかかる可能性がある。   Using temporary クエリを解決するために一時テーブルを作成する必要があり、非常に時間がかかる可能性がある。    クエリを高速にしたい場合は Using filesort および Using temporary の値に気をつける必要があります。\nUsing filesort は ORDER BY をする際に、クイックソートを実行します。ソートバッファに収まる程度のデータ量であればメモリ内での処理なので極端に遅くなることはありませんが、メモリ内での処理ができないほどのデータ量になると一時テーブルを作成し、メモリと併用するようになります。ファイルの I/O 処理は一般的にメモリ処理と比べると時間がかかります。\nUsing temporary は一時テーブルを作成して処理を行います。初めは一時テーブルを Using filesort と同様にメモリー内に保持して処理しますが、データ量が大きくなるとディスク上に格納して処理します。この処理も同様に時間がかかります。\nUsing filesort および Using temporary が表示されている場合は改善を試みましょう。\n終わりに 今回の記事では以下のことを取り上げました。\n インデックスとは何か 大規模なサービス開発をする上で、インデックスを適切に使うことの重要性 SQL が実行され、データアクセスするまでの流れ MySQL がどのようにインデックスを用いるか調べる方法 遅いクエリを生み出さないために押さえるべきポイント  これらを理解して、必要最小限のクエリのみが発行されるように開発を心がけると良さそうです。\nこの記事を読んで「面白かった」「学びがあった」と思っていただけた方、よろしければ Twitter やはてなブックマークにてコメントをお願いします！\nまた、DeNA 公式 Twitter アカウント @DeNAxTechでは、 Blog記事だけでなく色々な勉強会での登壇資料も発信しているのでぜひフォローして下さい。\n参照  MySQL 5.6 リファレンスマニュアル MySQL 8.0 リファレンスマニュアル 漢のコンピュータ道 MySQLのEXPLAINを徹底解説!! "
            }
    
        ,
            {
                "id": 2,
                "href": "https://7riatsu.com/post/becoming-a-member-of-society/",
                "title": "社会人になった所感",
                "section": "post",
                "date" : "2021.05.23",
                "body": "大学を卒業し、社会人になり約2ヶ月が経った。\n今感じていることを記録として残す目的でつらつらと書いていく。\nここで言う社会人とは、学生を卒業し、社会の一員として労働している自分のことを指すこととする。\n（なおこの投稿はポエム成分を含みます）\n経済的な独立と自分の人生 まず、社会人なって自分で給料を稼ぎ始めるようになり、経済的に独立した結果 \u0026ldquo;自分の人生を生きよう\u0026rdquo; という気持ちが強くなった。\n自分の場合、学生の間は両親や親族に経済的に大きく支えてもらっていた。\n学生の間は経済的に支援を受けている以上、親の思いや言葉には全面的にではないにせよある程度応える必要があると考えていた。\nしかし、経済的に独立した今は自分の稼いだお金で生活をしている以上何をしても自分に跳ね返ってくるだけなので、伸び伸びと自分のやりたいようにやっていこうと心境が変化した。\n自分の人生に対して責任を取るのは自分である。\n誰が何を言おうと、その人が責任を負ってくれるわけではない。\nただし、この気持ちは将来自分に家族ができた場合、また変わる気がしている。 とりあえず今は、自分の人生を自分のために目一杯送っていこう。\n得体の知れぬ不安 学生の間は無意識ながらもその期間に終わりがあることを意識していたように思う。\n高校であれば3年間、大学であれば4年間、普通に学校へ通って単位を取ればその生活が終了し、次のステージが来ると常に意識しているわけではないにせよ頭の片隅では理解していた。\nしかし、社会人には終わりがない。\n正確に言えば寿命が尽きる、定年に達した時に終わりは来るが、普通に過ごしていれば労働をし続ける未来が約40~50年ほど待っている。\nそんな社会人生活が始まったと思うと得体の知れぬ不安な気持ちが心をよぎる。\n自分でも不安の正体が何かはハッキリとはわかっていないけれど、なんとなく時の流れの速さ、理想とのギャップに対する不安は少なからず感じている気がする。\n大学に入学して以降、時間があっという間に過ぎるようになった感覚がある。\n大学入学直後のことを思い出すとかなり前のことのように感じるが、大学生活の中間点を抽出すると、その時点からすでに2年3年と経過しており、時の流れの速さにゾッとすることが多い。\n今これを書いている24歳の自分が、大学に入学した19歳時点のことを考えると、もうかなり前のことだなと感じる。\nしかし、今これを書いている24歳の自分が、21, 22歳時点のことを考えると、感覚的には一瞬のように感じるにも関わらず、客観的に見るとすでに2, 3年も経過している。\n今は2, 3年前を思い出して一瞬と言っているけれど、この幅がどんどん長くなっていってあっという間に人生を消費していくことにぼんやりと不安を覚える。\nただし、時の流れの速さについて不安を感じている一方で、今を点として抽出するととても充実している。\nなので、流れ着く先がなんとなく自分の期待する方向性に行っている気はするのであまり気にし過ぎず、今に集中しよう。\nまた、理想とのギャップに対する不安もある。\nしかし、これは \u0026ldquo;理想\u0026rdquo; とその \u0026ldquo;ギャップ\u0026rdquo; をきちんと整理してあげて、ギャップを埋める努力を一つずつ積み重ねていけば良いだけなので、まずは整理するところから始めていこう。\n以上なんのまとまりもないポエムでした。これからも人生を送っていくぞ。\n"
            }
    
        ,
            {
                "id": 3,
                "href": "https://7riatsu.com/post/new-grad-job-hunting-result/",
                "title": "21新卒ソフトウェアエンジニア職の就活振り返り",
                "section": "post",
                "date" : "2020.12.06",
                "body": "こんにちは @7riatsu です。\n本記事は21新卒ソフトウェアエンジニア職の就活振り返り記事です。\n自分が就活をする上でウェブ上に公開されている情報に大変助けられたため、新卒ソフトウェアエンジニア職で就活をしているorする予定の方の役に立てればと思い書きました。\n就活経験を通じて得られた教訓や、企業名を伏せて各社の就活結果を書いています。\nなお、本記事は DeNA 21 新卒 Advent Calendar 2020 の6日目分でもあります。（ネタバレ）\n特にお伝えしたいことは、自分が就活をする前に知っておきたかったことや、就活をする際にやっておいてよかったことです。\n対して、具体的な企業を推測できる内容については、内定承諾先を除いて記載していませんのでご了承ください。\n自分の特徴としては、1年休学してエンジニア経験を積んだ、非情報系、プログラミング開始時期が遅めといった点と認識しています。共通点のある方には特に参考になるかもしれません。\n本記事の目次は、以下となっております。\n 自己紹介 就活開始タイミングのスキル感 企業の選定基準 就活結果 結局どこ行くの？ ソフトウェアエンジニア職の就活tips まとめ  前半は自分についての話が多くなってしまっているので、興味のない方は ソフトウェアエンジニア職の就活tips から読んでいただけると、自分が本記事で一番お伝えしたかった就活をする際に役立ちそうなことを把握できるようになっています。\n自己紹介 東京都立大学の学部4年生です。専攻は工学（機械系）です。プログラミングは長期のインターンでの開発を通じて学びました。大学の授業ではほとんどやっていません。コンピュータサイエンス系の知識（アルゴリズム、低レイヤーなど）に弱い自覚があります。\n大学1年生の5月から職種を問わずインターンをしていました。（ウェブマーケティング/プロダクトマネージャー（以下PdM）/ソフトウェアエンジニアなど）\n大学3年生から4年生に上がるタイミングで1年間大学を休学して、PdM兼エンジニアとしてスタートアップ数社で働いていました。元々エンジニアリングのわかるPdMになりたいと思い1年間でエンジニアリングスキルを身に付けて、PdM職で就活するぞと休学を決意したのですが、エンジニアリングの奥深さに魅せられた結果、ファーストキャリアはソフトウェアエンジニアとしてスタートすることにしました。\nプログラミングは大学2年生の12月に始めました。そのため、休学期間を含めてプログラミング歴が2年と2ヶ月のタイミングで就活を開始したことになります。中高生や大学入学直後から始めている強い人が目立つ中、比較的遅い方かと思います。\n最初は1人で簡単なWebアプリを作ったりしていましたが、途中から実務経験を積みながらスキル向上を目指すスタイルに切り替えました。休学していた間は創業直後のスタートアップで働くことが多かったため、PdMとして開発全般を見たり、エンジニアとして手を動かしていました。時間比率としてはPdM:エンジニア=3:7くらいの感覚です。\nちなみに大学の夏や春の長期休暇に合わせて開催されるエンジニアインターンには参加したことがありません。これは後ほど言及しますが、参加しておくべきだったと非常に後悔しています。\n就活開始タイミングのスキル感 就活を開始したタイミングでの自分のスキル感を列挙してみます。\n  アルゴリズム: 受けた企業のうちコーディングテスト通過は半分くらい。AtCoderのABCのA~C問題はほぼ解けるが、D問題以降は壁を感じていた。\n  フロントエンド: あまり得意ではない。既存のコードを参考にしながら開発を行うことはできていた程度。CSSに苦手意識がかなりある。\n  バックエンド: バックエンド開発を担うことが多かったので最も得意。Ruby on Rails, Node.jsが特に得意で、一応Goも使える。一番得意なRailsでは、サブスクリプション課金やポイントシステムなど難易度の比較的高そう（主観）な実装も行っていた。\n  モバイル: ほぼ未経験。見様見真似でFlutterのコードを書いていた時期もあるが開発速度はすごく遅かった。一時期Swiftを独学したがあまりハマらなかった。\n  インフラ: 得意でも苦手でもない。クラウド系のサービスは触ったことがあるが、表面的にしか理解できていない感覚がある。\n  低レイヤ: OSやコンパイラの自作系のプロジェクトを途中までやったことがあり、ざっくり仕組みを知っている程度。\n  まとめると、特にバックエンドが得意で、その他は少々かじったことがある程度と思っていただけると良さそうです。\n企業の選定基準 自分が応募や内定承諾するにあたっての企業の選定基準は以下でした。\n  企業規模: 大企業。いわゆるメガベンチャーを受けるケースが大半だった。スタートアップ経験を積んだ結果、大企業の方が今の自分にはメリットがあると判断。\n  カルチャー: 新卒でも色々任せてもらえそうか、面談や面接で会った人たちの雰囲気が自分に合うかどうかを見ていた。前者は具体的な例や数（新卒の活躍事例やPdMになっている人の数）を聞いて、後者は自分が心地よく働けそうかをフィーリングで判断した。\n  技術: 新しい技術を取り入れる姿勢があるかどうか、技術的な強みを持つことを裏付ける理由があるかどうかを見ていた。 逆にあまり重視しなかった点は以下です。\n  事業領域: どうしても携わりたいと思うようなドメインがなかったので、そこまで意識しなかった。ただし人の役に立つ、幸せに繋がるようなものを作りたいとは常々考えていた。\n  会社の自由度: 自分が受けていたウェブ業界は比較的自由な雰囲気の会社が多そうだったのであまり意識しなかった。\n  待遇: 高い方が良い（それはそう）とは思ったが、1-3年でどうこうというより、長い目で見てプラスになりそうかを意識した。\n  就活結果 先に結果をお伝えすると、8エントリーして3内定、4落ち、1辞退でした。\n選考期間は大学3年生の2月から大学4年生の7月の5ヶ月間です。\n前提として応募したのは全てサーバーサイドエンジニアかソフトウェアエンジニアの募集です。明確にフロント,モバイル,インフラ,機械学習を指定した職種には応募していません。\nまた、コロナ禍がすでに始まっていたため、A社を除いてオンライン上で完結する就活となりました。自分は都内に住んでいますが、移動がなかったので時間と交通費の節約になり良かったです。特に不都合を感じることもありませんでした。\nそれでは大まかな時系列に沿って各社の振り返りをします。\nA社 2月に初旬にエントリーして、2月中旬にホワイトボードコーディングインタビューで落ちました。逆にここで落ちて発破がかかり、本格的に就活と向き合えました。\nB社 3月初旬にエントリーして、即内定をいただけました。内定が出たのが3月初旬で、就活開始直後のタイミングだったのでその後控えていた他の企業の面接にリラックスして臨むことができました。一つ内定を持っているだけで精神的余裕に天と地ほど差が生じるので早めに内定を一つ獲得できると良さそうです。\nC社 3月下旬にエントリーして、4月中旬に内定をいただけました。企業の選定基準とも合っていましたし、なんとなく自分に合いそうな雰囲気を感じていたので、就活開始時の志望度は最も高かったです。しかし、最後の最後までH社と悩んだ結果、内定を辞退する運びとなりました。\nD社 3月下旬にエントリーして、4月中旬に次が最終面接というタイミングで志望度の高かったC社から内定をいただいたため、選考を辞退させていただきました。\nE, F, G社 これらの企業は3月から4月にかけてエントリーして、4月中旬にコーディングテストで落ちてしまいました。 自分が受けていたいわゆるウェブ業界では珍しく、G社だけSPIがありました。ほとんど対策をしていなかったので手間取った記憶があります。\nH社 3月下旬にエントリーして、7月初旬に内定をいただくことができました。こちらの企業は複数回インターンの選考で落とされていたことがあったので、ダメ元で応募していたのですが予想に反してスルスルと進むことができました。インターンで落ちても本選考は通過する場合もあるようです。採用プロセスが比較的ゆっくりだったことと、二次面接通過までコミュニケーションを取る機会が少なかったため、当初の志望度はそこまで高くありませんでした。しかし、最終面接前から内定後にかけて非常に手厚く面談を組んでいただき企業理解が進んだため、志望度が急上昇しました。最後の最後までC社と悩んだ結果、こちらのH社の内定を承諾しました。（チームによると思いますが）少数精鋭で事業を作っている雰囲気や、エンジニア出身者がPdMをになっている事例の多さ、ロジカルに物事を進める雰囲気が内定承諾の決め手でした。\n振り返ると面接までたどり着けた企業はほぼ落ちていないのですが、コーディングインタビュー/テストで落ちすぎですね。自分の勉強不足が露見してしまいました、、。\n逆に面接は得意な自覚がありましたが、振り返ってみると結果に反映されていることがわかりました。\n結局どこ行くの？ 記事冒頭でネタバレしてしまいましたが、DeNAに入社予定です。職種はソフトウェアエンジニアです。就活結果に記載していたH社はDeNAでした。内定承諾をした理由は上に記載してある通りです。\n来年から働くのが楽しみです！\nソフトウェアエンジニア職の就活tips ここからは就活を経験した結果、事前にやっておいたり、知っておくと良さそうなtipsを主観的に書いていきます。自分が就活をする前に知っておきたかったことと、自分が就活をする際にやっておいてよかったことがあるので、分けてお伝えしていきます。\n就活をする前に知っておきたかったこと 長期休みのインターンには絶対に参加した方が良い 各社夏と春にインターンを開催していますが、絶対に参加しておくのがおすすめです。自分は携わっていたプロジェクトの兼ね合いで参加できなかったのですが、本選考にエントリーする際に参加しなかったことをかなり後悔しました、、。\n企業側からすると本選考に繋がる超大事なイベントな訳で、自社の魅力を存分に伝えるべく力を入れて企画しているはずです。参加することで企業によっては本選考が有利になったり、カルチャーのような言語化が難しい側面を身を以て体感できると思います。期間に関しては参加できる数は減ってしまいますが、1-3日程度のプログラムよりある程度長いプログラムの方が実態を知れると思うので良いと思います。\nあとは同年代のエンジニア達と繋がりを作っておくと就活時期に情報共有ができて良さそうです。自分は同年代の知り合いが極端に少なかったので情報収集に手間取りました。\nコーディングテスト/インタビューの準備は必須 自分が受けたようないわゆるウェブ系の企業では、大体エントリー後にコーディングテストが最初に課されることが多かったです。ここを突破できないと面接にすらたどり着けず、受験で言えば足切りを食らうも同然なので、しっかりと準備が必要だったなと思います。また、面接時にホワイトボードにアルゴリズムを書かされるコーディングインタビューにも遭遇しました。\nこれらの対策としては、いわゆる競技プログラミング系の練習サイトで練習したり、人に説明しながらホワイトボードや紙にプログラムを書く練習をすると良さそうです。\n内定承諾の基準は選考開始前に考えておく 自分はC社とH社どちらの内定を承諾するか非常に悩みました。悩んでいる時間が長いほど、その他のことに割ける時間が減るのは自明です。悩む時間を減らすためには、選考開始前にある程度内定承諾の基準を考えておくと良いと思います。\n自分の場合、選考が進むとあれこれと比較項目が増えてしまい、自分が本当に大事にしたい判断基準を見失ってしまいました。本当に大事にしたい基準は多くないはずです。ここだけは譲れないという基準を1~3個程度明確にしておくと自分のように決断に時間をかけすぎずに済むと思います。\n普段使っている技術は深掘りしておく 自分が普段使っている技術は深掘りしておくと良いと思います。技術はあまり深く理解していなくても動かせてしまう場合がありますが、それでは少し外れたことをやろうとしたり、問題が起こったときの対処が取れなくなりがちです。この人はどの程度深く技術を理解しているのか、普段どのように技術と向き合っているのかという観点を見られるので、日常的にしっかり深掘りする癖をつけるのが大事そうです（自戒）。\n具体的にはその技術の動作原理、生まれた背景、何を解決するものかを把握すると良いと思います。\n就活をする際にやっておいてよかったこと 内定しても行かない会社にはエントリーしない 内定をたくさんコレクションしても結局は一社に決めるので、無駄にいく気のない企業を受ける必要はないと思います。内定がない状態ならまだしも、一つでも納得のいく内定が出れば絞って良さそうです。\n面接はある程度回数をこなして面接慣れする 無駄にエントリーする必要はないと思う一方で、受ける企業を絞り過ぎる（1, 2社だけ）のもどうかなーと思います。理由としては、面接で聞かれる内容は大体どこの会社も似通っていて、回数をこなすことで面接慣れするからです。\n絶対どこでも受かる自信あるぞという強い人は別として、いきなり本命企業の面接にいくよりも、ある程度面接慣れした状態で行った方が、無駄を省いてエピソードを話せるようになったり、面接に対して緊張や恐怖を抱かなくなると思います。\n落ちても自分を責めない 採用に落ちても自分を責める必要はないです。企業や面接官との相性、コーディング面接の問題との相性など、どうすることもできない要素で落ちたかもしれませんし、単純に運が悪かっただけかもしれません。どうして失敗したかはきちんと振り返った方がいいと思いますが、そのあとは割り切ってしまうのが精神衛生上良いなと感じました。失敗を引きずってその後の選考に悪影響を与えることは一番避けなければなりません。\n面接を楽しむ 結局のところ、面接は人と人とのコミュニケーションの場です。同じ1時間を過ごすなら、打ち解けた雰囲気で相互理解できるのが最良です。\n自分の面接時はかしこまりすぎず、お互いに楽しめるよう打ち解けた雰囲気を作るようにコミュニケーションを取るようにしました。自分の緊張は相手にも伝播するので、「緊張しすぎず楽しんでいくぞ」というマインドで臨むと、自然と良い結果に繋がると思います。\nまとめ 随分と長くなってしまいましたが、最後まで読んでいただいてありがとうございました！\nこれから就活をする方々の参考になる内容となっていれば幸いです。\nもしこの内容が参考になると思ったら、SNS（Twitter, はてなブックマーク, Facebookなど）で拡散していただいたり、就活中の友達にリンクを送っていただけると大変励みになります！\nまた、DeNA 公式 Twitter アカウント @DeNAxTechでは、 Blog記事だけでなく色々な勉強会での登壇資料も発信しているのでぜひフォローして下さい。\n最後に、何か聞きたいことや要望などがございましたら、Twitterの @7riatsu までDMやリプライにてご連絡いただけますと幸いです。\n"
            }
    
        ,
            {
                "id": 4,
                "href": "https://7riatsu.com/post/hello/",
                "title": "Hello World!",
                "section": "post",
                "date" : "2020.09.27",
                "body": "初めまして！\n新しくブログを作成しました。\n技術的なことを中心に書いていく予定です。\n簡単な自己紹介です。\n 名前: 成田篤基(なりたあつき) 出身: 北海道札幌市  今は東京に住んでいます   所属: 東京都立大学4年生  専攻は工学(機械)   好きなもの: プログラミング、旅行、コーヒー、温泉、筋トレ、シーシャ、映画、本 得意な技術: Ruby, Python, Go, Node.jsなどのサーバーサイド開発 その他: 2021年から新卒ソフトウェアエンジニアとして働く予定  各種リンクおいておくのでコンタクト取りたい方がいましたらこちらにご連絡ください。\n https://twitter.com/7riatsu https://github.com/7riatsu https://www.facebook.com/narita.atsuki https://www.linkedin.com/in/narita-atsuki/ "
            }
    
]
